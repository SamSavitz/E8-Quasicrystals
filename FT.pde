import java.util.*;

final int N = 240;
final int D = 8;

final float SCALE = 3;
final float DIAMETER = 45/2;

final int[] [] ROOTS = {
    {0, 0, 0, 0, 0, 0, 2, -2}, {0, 0, 0, 0, 0, 0, 2, 2}, {0, 0, 0, 0, 0, 2, -2, 0}, {0, 0, 0, 0, 0, 2, 0, -2}, {0, 0, 0, 0, 0, 2, 0, 2}, {0, 0, 0, 0, 0, 2, 2, 0}, {0, 0, 0, 0, 2, -2, 0, 0}, {0, 0, 0, 0, 2, 0, -2, 0}, {0, 0, 0, 0, 2, 0, 0, -2}, {0, 0, 0, 0, 2, 0, 0, 2}, {0, 0, 0, 0, 2, 0, 2, 0}, {0, 0, 0, 0, 2, 2, 0, 0}, {0, 0, 0, 2, -2, 0, 0, 0}, {0, 0, 0, 2, 0, -2, 0, 0}, {0, 0, 0, 2, 0, 0, -2, 0}, {0, 0, 0, 2, 0, 0, 0, -2}, {0, 0, 0, 2, 0, 0, 0, 2}, {0, 0, 0, 2, 0, 0, 2, 0}, {0, 0, 0, 2, 0, 2, 0, 0}, {0, 0, 0, 2, 2, 0, 0, 0}, {0, 0, 2, -2, 0, 0, 0, 0}, {0, 0, 2, 0, -2, 0, 0, 0}, {0, 0, 2, 0, 0, -2, 0, 0}, {0, 0, 2, 0, 0, 0, -2, 0}, {0, 0, 2, 0, 0, 0, 0, -2}, {0, 0, 2, 0, 0, 0, 0, 2}, {0, 0, 2, 0, 0, 0, 2, 0}, {0, 0, 2, 0, 0, 2, 0, 0}, {0, 0, 2, 0, 2, 0, 0, 0}, {0, 0, 2, 2, 0, 0, 0, 0}, {0, 2, -2, 0, 0, 0, 0, 0}, {0, 2, 0, -2, 0, 0, 0, 0}, {0, 2, 0, 0, -2, 0, 0, 0}, {0, 2, 0, 0, 0, -2, 0, 0}, {0, 2, 0, 0, 0, 0, -2, 0}, {0, 2, 0, 0, 0, 0, 0, -2}, {0, 2, 0, 0, 0, 0, 0, 2}, {0, 2, 0, 0, 0, 0, 2, 0}, {0, 2, 0, 0, 0, 2, 0, 0}, {0, 2, 0, 0, 2, 0, 0, 0}, {0, 2, 0, 2, 0, 0, 0, 0}, {0, 2, 2, 0, 0, 0, 0, 0},
    {1, -1, -1, -1, -1, -1, -1, 1}, {1, -1, -1, -1, -1, -1, 1, -1}, {1, -1, -1, -1, -1, 1, -1, -1}, {1, -1, -1, -1, -1, 1, 1, 1}, {1, -1, -1, -1, 1, -1, -1, -1}, {1, -1, -1, -1, 1, -1, 1, 1}, {1, -1, -1, -1, 1, 1, -1, 1}, {1, -1, -1, -1, 1, 1, 1, -1}, {1, -1, -1, 1, -1, -1, -1, -1}, {1, -1, -1, 1, -1, -1, 1, 1}, {1, -1, -1, 1, -1, 1, -1, 1}, {1, -1, -1, 1, -1, 1, 1, -1}, {1, -1, -1, 1, 1, -1, -1, 1}, {1, -1, -1, 1, 1, -1, 1, -1}, {1, -1, -1, 1, 1, 1, -1, -1}, {1, -1, -1, 1, 1, 1, 1, 1}, {1, -1, 1, -1, -1, -1, -1, -1}, {1, -1, 1, -1, -1, -1, 1, 1}, {1, -1, 1, -1, -1, 1, -1, 1}, {1, -1, 1, -1, -1, 1, 1, -1}, {1, -1, 1, -1, 1, -1, -1, 1}, {1, -1, 1, -1, 1, -1, 1, -1}, {1, -1, 1, -1, 1, 1, -1, -1}, {1, -1, 1, -1, 1, 1, 1, 1}, {1, -1, 1, 1, -1, -1, -1, 1}, {1, -1, 1, 1, -1, -1, 1, -1}, {1, -1, 1, 1, -1, 1, -1, -1}, {1, -1, 1, 1, -1, 1, 1, 1}, {1, -1, 1, 1, 1, -1, -1, -1}, {1, -1, 1, 1, 1, -1, 1, 1}, {1, -1, 1, 1, 1, 1, -1, 1}, {1, -1, 1, 1, 1, 1, 1, -1}, {1, 1, -1, -1, -1, -1, -1, -1}, {1, 1, -1, -1, -1, -1, 1, 1}, {1, 1, -1, -1, -1, 1, -1, 1}, {1, 1, -1, -1, -1, 1, 1, -1}, {1, 1, -1, -1, 1, -1, -1, 1}, {1, 1, -1, -1, 1, -1, 1, -1}, {1, 1, -1, -1, 1, 1, -1, -1}, {1, 1, -1, -1, 1, 1, 1, 1}, {1, 1, -1, 1, -1, -1, -1, 1}, {1, 1, -1, 1, -1, -1, 1, -1}, {1, 1, -1, 1, -1, 1, -1, -1}, {1, 1, -1, 1, -1, 1, 1, 1}, {1, 1, -1, 1, 1, -1, -1, -1}, {1, 1, -1, 1, 1, -1, 1, 1}, {1, 1, -1, 1, 1, 1, -1, 1}, {1, 1, -1, 1, 1, 1, 1, -1}, {1, 1, 1, -1, -1, -1, -1, 1}, {1, 1, 1, -1, -1, -1, 1, -1}, {1, 1, 1, -1, -1, 1, -1, -1}, {1, 1, 1, -1, -1, 1, 1, 1}, {1, 1, 1, -1, 1, -1, -1, -1}, {1, 1, 1, -1, 1, -1, 1, 1}, {1, 1, 1, -1, 1, 1, -1, 1}, {1, 1, 1, -1, 1, 1, 1, -1}, {1, 1, 1, 1, -1, -1, -1, -1}, {1, 1, 1, 1, -1, -1, 1, 1}, {1, 1, 1, 1, -1, 1, -1, 1}, {1, 1, 1, 1, -1, 1, 1, -1}, {1, 1, 1, 1, 1, -1, -1, 1}, {1, 1, 1, 1, 1, -1, 1, -1}, {1, 1, 1, 1, 1, 1, -1, -1}, {1, 1, 1, 1, 1, 1, 1, 1},
    {2, -2, 0, 0, 0, 0, 0, 0}, {2, 0, -2, 0, 0, 0, 0, 0}, {2, 0, 0, -2, 0, 0, 0, 0}, {2, 0, 0, 0, -2, 0, 0, 0}, {2, 0, 0, 0, 0, -2, 0, 0}, {2, 0, 0, 0, 0, 0, -2, 0}, {2, 0, 0, 0, 0, 0, 0, -2}, {2, 0, 0, 0, 0, 0, 0, 2}, {2, 0, 0, 0, 0, 0, 2, 0}, {2, 0, 0, 0, 0, 2, 0, 0}, {2, 0, 0, 0, 2, 0, 0, 0}, {2, 0, 0, 2, 0, 0, 0, 0}, {2, 0, 2, 0, 0, 0, 0, 0}, {2, 2, 0, 0, 0, 0, 0, 0}
};

final double[] [] [] XY = {
  {{0, 0.500000000000000000, 0, 0, -0.500000000000000000, 0.500000000000000000, 0, 0.500000000000000000}, {0.500000000000000000, 0, -0.500000000000000000, 0.500000000000000000, 0, 0, 0.500000000000000000, 0}}, // 4
  {{0.408248290463863016, 0.408248290463863016, -0.408248290463863016, 0, 0.408248290463863016, 0.408248290463863016, 0, 0.408248290463863016}, {0, 0, 0, -0.707106781186547524, 0, 0, 0.707106781186547524, 0}}, // 6
  {{0.577350269189625765, -0.288675134594812882, 0.288675134594812882, 0, -0.288675134594812882, -0.288675134594812882, 0, 0.577350269189625765}, {0, -0.500000000000000000, 0.500000000000000000, 0, 0.500000000000000000, 0.500000000000000000, 0, 0}}, // 6
  {{-0.197548403047470691, 0, 0.269856137039892181, 0.269856137039892181, 0, -0.638486475603519708, 0.638486475603519708, 0}, {0, 0.197548403047470691, -0.269856137039892181, 0.269856137039892181, 0, 0.368630338563627527, 0.368630338563627527, -0.737260677127255054}}, // 6L
  {{0, 0.353553390593273762, 0, 0, -0.353553390593273762, -0.146446609406726238, 0, 0.853553390593273762}, {0.353553390593273762, 0.500000000000000000, -0.353553390593273762, 0.353553390593273762, 0.500000000000000000, 0, 0.353553390593273762, 0}}, // 8
  {{-0.653281482438188264, 0.461939766255643378, 0, 0.270598050073098492, 0.461939766255643378, 0.191341716182544886, 0, 0.191341716182544886}, {-0.191341716182544886, 0.270598050073098492, 0.461939766255643378, 0.191341716182544886, -0.653281482438188264, 0, -0.461939766255643378, 0}}, // 8
  {{0.0975451610080641339, 0.277785116509801112, 0.415734806151272619,   0.490392640201615225, 0.490392640201615225, 0.415734806151272619,   0.277785116509801112, 0.0975451610080641339}, {-0.490392640201615225, -0.415734806151272619, -0.277785116509801112, -0.0975451610080641339,   0.0975451610080641339, 0.277785116509801112, 0.415734806151272619,   0.490392640201615225}}, // 8TR
  {{0.316227766016837933, 0, 0, -0.316227766016837933, 0.707106781186547524, -0.316227766016837933, 0.316227766016837933, 0.316227766016837933}, {0, 0.229752920547361184, -0.973248989467730164, 0, 0, 0, 0, 0}}, // 10
  {{0.149429245361342254, 0, -0.557677535825205270, -0.408248290463863016, -0.408248290463863016, 0, 0.557677535825205270, 0.149429245361342254}, {0, 0.557677535825205270, -0.408248290463863016, -0.149429245361342254, 0.149429245361342254, 0.557677535825205270, -0.408248290463863016, 0}}, // 12
  {{-0.229850421690491530, -0.627963030199554376, 0.229850421690491530, 0, -0.627963030199554376, 0, -0.229850421690491530, 0.229850421690491530}, {0, -0.229850421690491530, 0, 0.857813451890045906, 0.229850421690491530, 0.398112608509062845, 0, 0}}, // 12
  {{0.600530559441417442, 0.267261241912424385, -0.148318799591070077, 0.214326875207638750, 0.600530559441417442, -0.148318799591070077, -0.214326875207638750, 0.267261241912424385}, {0.417906505941274998, 0, -0.521120889169602390, 0.231920613924329864, -0.417906505941274998, 0.521120889169602390, 0.231920613924329864, 0}}, // 14
  {{0.0559945364161496122, -0.303012985114695786, 0.161229841765316842, 0, -0.303012985114695786, -0.161229841765316842, 0, 0.872491117343875645}, {0, 0.207273089196933958, -0.596819074008650410, -0.317560796374831073, -0.207273089196933958, -0.596819074008650410, -0.317560796374831073, 0}}, // 18
  {{0.437728298877752897, 0.276930265134699605, 0.0653743675988290613, -0.0757286502225401018, -0.583909828814794379, -0.266575982510988564, -0.0300492985453951699, 0.555678436894259298}, {-0.342304632733528666, 0.803682931566100872, 0.189723804205911323, 0.335905334142952805, 0.201201614912159503, -0.217955196126446404, 0.0103542826237110405, 0}}, // 20
  {{0.0898947228454215865, -0.0975505379830079300, -0.217025059079187300, 0.613839563849217773, 0.202235159953808408, -0.329365496187574121, 0.546390555266761421, 0.332536638648583628}, {-0.181319084024567603, -0.419260219032995708, -0.697608109890777446, 0.112340437108386822, -0.462622009225201748, 0.248768092607023955, -0.127130336233765713, 0}}, // 24
  {{-0.596419833949013074, 0.0498022978956445130, -0.210965919321644885, -0.174487995305723305, -0.166862032624566278, 0.515838023236012888, 0.0441038866970786062, 0.520551127369906208}, {-0.225831900609751257, 0.0542167609531793803, -0.229665884917524148, -0.613409003157738777, 0.153275712346922884, -0.473837212836924397, -0.518679403277488520, 0}} // 30
};

String[] texts = {
  " 4-fold  D₃, A₃, B₂",
  " 6-fold  D₄, B₃, G₂, A₂",
  " 6-fold  A₅",
  " 6-fold  Lisi Triality  (12/2)",
  " 8-fold  D₅, B₄",
  " 8-fold  A₇",
  " 8-fold  B₈  (16/2)",
  "10-fold  D₆, B₅, A₄",
  "12-fold  D₇, B₆",
  "12-fold  E₆, F₄",
  "14-fold  D₈, B₇, A₆",
  "18-fold  E₇",
  "20-fold",
  "24-fold",
  "30-fold  E₈, H₄  Coxeter plane"
};

IntList crystals = new IntList();
ArrayList <Boolean> labels = new ArrayList <Boolean> ();
ArrayList <Double> scale = new ArrayList <Double> ();
ArrayList <Double [] [] > data = new ArrayList <Double[] [] > ();


color[] colors = {
  color(255, 255, 255),
  color(255, 165, 175),
  color(100, 255, 125),
  color(180, 175, 255),
  color(225, 100, 235)
};

int[] [] cs = {
  {
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    0, 0, 0, 0
  }, {
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1,
    0, 0, 0, 0, 0, 0
  }, {
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1
  }, {
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2,
    2, 2, 2, 1, 1, 2, 2, 2, 1, 1,
    2, 2, 2, 1, 1, 2, 2, 2, 1, 1,
    2, 2, 2, 1, 1, 2, 2, 2, 1, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0,
    1, 1, 2, 2, 2, 1, 1, 2, 2, 2,
    1, 1, 2, 2, 2, 1, 1, 2, 2, 2,
    1, 1, 2, 2, 2, 1, 1, 2, 2, 2,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0 
  }, {
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1,
    0, 0, 0, 0, 0, 0, 0, 0,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0
  }, {
    3, 3, 3, 3, 3, 3, 3, 3, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2,
    0, 0, 0, 0, 0, 0, 0, 0,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1
  }, {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  }, {
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  }, {
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 3,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1
  }, {
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0
  }, {
    1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0
  }, {
    2, 2, 2, 2, 2, 2,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0
  }, {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  }, {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  }, {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  }
};

void setup() {
  size(960, 960);
  frameRate(30);
  
  noStroke();
  ellipseMode(CENTER);
  
  textSize(48);
  
  file();
}

void file() {
  BufferedReader reader = createReader("/home/sam/Research/E8/QC2/data.tsv");
  String line = null;
  
  try {
    while ((line = reader.readLine()) != null) {
      String[] s = split(line, TAB);
      
      int     f     = int(s[0] );
      int     n     = int(s[1] );
      int     ff    = int(s[2] );
      boolean label = s[3].equals("0");
      double  rot   = Double.parseDouble(s[4] );
      double  zoom  = Double.parseDouble(s[5] );
      
      crystals.append(n);
      labels.add(label);
      scale.add(zoom);
      
      Double[] [] xy = new Double[2] [8];
      
      line = reader.readLine();
      s = split(line, TAB);
      
      for (int d = 0; d < D; d++)
        xy[0] [d] = Double.parseDouble(s[d] );
      
      line = reader.readLine();
      s = split(line, TAB);

      for (int d = 0; d < D; d++)
        xy[1] [d] = Double.parseDouble(s[d] );

      data.add(xy);
    }
    
    reader.close();
  } catch (IOException e) {
    e.printStackTrace(); //<>//
  }
}

class PVectorComparator implements Comparator <PVector> {
  public int compare(PVector u, PVector v) {      
    double ux = u.x;
    double uy = u.y;
    double vx = v.x;
    double vy = v.y;
    
    double ur = Math.sqrt(ux*ux + uy*uy);
    double vr = Math.sqrt(vx*vx + vy*vy);
    
    double ua = Math.atan2(uy, ux);
    double va = Math.atan2(vy, vx);

    double us = ur + ua/1e6;
    double vs = vr + va/1e6;
    
         if (us < vs)
      return -1;
    else if (vs < us)
      return +1;
    else
      return  0;
  }
}


void draw() {
  if (frameCount >= data.size()) {
    exit();
    return; 
  }
  
  background(0, 0, 0);
  
  ArrayList <PVector> ps = new ArrayList <PVector> ();

  for (int r = 0; r < N/2; r++) {
    double x = 0, y = 0;
    
    for (int d = 0; d < D; d++) {
      x += ROOTS[r] [d]*data.get(frameCount) [0] [d];
      y += ROOTS[r] [d]*data.get(frameCount) [1] [d];
    }
    
    x /= scale.get(frameCount);
    y /= scale.get(frameCount);
    
    ps.add(new PVector((float)  x, (float)  y));
    ps.add(new PVector((float) -x, (float) -y));
  }
  
  Collections.sort(ps, new PVectorComparator());
    
  for (int i = 0; i < N; i++) {
    PVector p = ps.get(i);
    
    if (labels.get(frameCount)) {
      fill(colors[cs[crystals.get(frameCount) ] [i]] );
    } else
      fill(255, 255, 255);
    
    
    point(p.x, p.y);
  }
      
  //fill(255, 204, 204);
    
  //if (labels.get(frameCount))
  //  text(texts[crystals.get(frameCount) ], 100, 100);
    
  saveFrame("/home/sam/Research/E8/FT/Stills/#####.png");
}

void point(float x, float y) {
  PVector center = scale(new PVector(x, y));
  
  ellipse(center.x, center.y, DIAMETER, DIAMETER);
}

PVector scale(PVector v) {
  return new PVector(
     width*( v.x/SCALE + 1)/2,
    height*(-v.y/SCALE + 1)/2
  ); 
}
